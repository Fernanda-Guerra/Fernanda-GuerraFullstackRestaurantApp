{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/Users/fernandaguerra/Desktop/bootcampProjects/module_28/setting-up-graphql-with-apollo_starter/components/dishes.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\nquery ($id: ID!) {\\n  restaurant(id: $id) {\\n    data {\\n      id\\n      attributes {\\n        name\\n        dishes {\\n          data {\\n            id\\n            attributes {\\n              name\\n              description\\n              price\\n              image {\\n                data {\\n                  attributes {\\n                    url\\n                  }\\n                }\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useRouter } from \"next/router\";\nimport { gql, useQuery } from '@apollo/client';\nimport { useState, useContext } from 'react';\nimport AppContext from \"./context\";\nimport { Button, Card, CardBody, CardImg, CardText, CardTitle, Row, Col } from \"reactstrap\";\n\nfunction Dishes(_ref) {\n  _s();\n\n  var _this = this;\n\n  var restId = _ref.restId;\n\n  var _useState = useState(),\n      restaurantID = _useState[0],\n      setRestaurantID = _useState[1];\n\n  var _useContext = useContext(AppContext),\n      addItem = _useContext.addItem;\n\n  var GET_RESTAURANT_DISHES = gql(_templateObject());\n  var router = useRouter();\n\n  var _useQuery = useQuery(GET_RESTAURANT_DISHES, {\n    variables: {\n      id: restId\n    },\n    fetchPolicy: \"no-cache\"\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 21\n    }\n  }, \"ERROR here\");\n  if (!data) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 21\n    }\n  }, \"Not found\");\n\n  if (restId > 0) {\n    var dishes = data.restaurant.data.attributes.dishes.data.map(function (dish) {\n      var flatDish = new Object();\n      flatDish.id = dish.id;\n      flatDish.name = dish.attributes.name;\n      flatDish.description = dish.attributes.description;\n      flatDish.price = dish.attributes.price;\n      var image = new Object();\n      image.url = dish.attributes.image.data.attributes.url;\n      flatDish.image = image;\n      return flatDish;\n    });\n    console.log(\"restaurants: \" + JSON.stringify(dishes[0]));\n    return __jsx(React.Fragment, null, dishes.map(function (dish) {\n      return __jsx(Col, {\n        xs: \"6\",\n        sm: \"4\",\n        style: {\n          padding: 0\n        },\n        key: dish.id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }\n      }, __jsx(Card, {\n        style: {\n          margin: \"0 10px\"\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 15\n        }\n      }, __jsx(CardImg, {\n        top: true,\n        style: {\n          height: 150,\n          width: 150\n        },\n        src: \"http://localhost:1337\" + dish.attributes.image.data.attributes.url,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 17\n        }\n      }), __jsx(CardBody, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 17\n        }\n      }, __jsx(CardTitle, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 19\n        }\n      }, dish.attributes.name), __jsx(CardText, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 19\n        }\n      }, dish.attributes.description)), __jsx(\"div\", {\n        className: \"card-footer\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 17\n        }\n      }, __jsx(Button, {\n        colors: \"info\",\n        outline: true,\n        color: \"primary\",\n        onClick: function onClick() {\n          return addItem(dish);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 19\n        }\n      }, \"+ Add To Cart\"))));\n    }));\n  } else {\n    return __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 18\n      }\n    }, \" No Dishes\");\n  }\n}\n\n_s(Dishes, \"fozMU1l7TGPKwww7Ipct1ceMLiM=\", false, function () {\n  return [useRouter, useQuery];\n});\n\n_c = Dishes;\nexport default Dishes;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dishes\");","map":{"version":3,"sources":["/Users/fernandaguerra/Desktop/bootcampProjects/module_28/setting-up-graphql-with-apollo_starter/components/dishes.js"],"names":["useRouter","gql","useQuery","useState","useContext","AppContext","Button","Card","CardBody","CardImg","CardText","CardTitle","Row","Col","Dishes","restId","restaurantID","setRestaurantID","addItem","GET_RESTAURANT_DISHES","router","variables","id","fetchPolicy","loading","error","data","dishes","restaurant","attributes","map","dish","flatDish","Object","name","description","price","image","url","console","log","JSON","stringify","padding","margin","height","width"],"mappings":"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","sourcesContent":["import {useRouter} from \"next/router\"\nimport {gql,useQuery} from '@apollo/client';\nimport {useState, useContext} from 'react'\nimport AppContext from \"./context\"\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardImg,\n  CardText,\n  CardTitle,\n  Row,\n  Col} from \"reactstrap\";\nfunction Dishes({restId}){\n  const [restaurantID, setRestaurantID] = useState()\n  const {addItem} = useContext(AppContext)\n\nconst GET_RESTAURANT_DISHES = gql`\nquery ($id: ID!) {\n  restaurant(id: $id) {\n    data {\n      id\n      attributes {\n        name\n        dishes {\n          data {\n            id\n            attributes {\n              name\n              description\n              price\n              image {\n                data {\n                  attributes {\n                    url\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n`;\n\n  const router = useRouter();\n\n  const { loading, error, data } = useQuery(GET_RESTAURANT_DISHES, {\n    variables: { id: restId},\n    fetchPolicy: \"no-cache\" \n  });\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>ERROR here</p>;\n  if (!data) return <p>Not found</p>;\n\n  \n\n  if (restId > 0){\n    let dishes = data.restaurant.data.attributes.dishes.data.map((dish) => {\n      const flatDish = new Object();\n        flatDish.id = dish.id\n        flatDish.name = dish.attributes.name\n        flatDish.description = dish.attributes.description\n        flatDish.price = dish.attributes.price\n      const image = new Object()\n      image.url = dish.attributes.image.data.attributes.url\n        flatDish.image = image\n        return flatDish\n  });\n    console.log(\"restaurants: \" + JSON.stringify(dishes[0]))\n  \n    \n    return (\n      <>\n          {dishes.map((dish) => (\n            <Col xs=\"6\" sm=\"4\" style={{ padding: 0 }} key={dish.id}>\n              <Card style={{ margin: \"0 10px\" }}>\n                <CardImg\n                  top={true}\n                  style={{ height: 150, width:150 }}\n                  src={`http://localhost:1337`+ dish.attributes.image.data.attributes.url }\n                />\n                <CardBody>\n                  \n                  <CardTitle>{dish.attributes.name}</CardTitle>\n                  <CardText>{dish.attributes.description}</CardText>\n                </CardBody>\n                <div className=\"card-footer\">\n                  <Button colors=\"info\"\n                    outline\n                    color=\"primary\"\n                    onClick = {()=> addItem(dish)}\n                  >\n                    + Add To Cart\n                  </Button>\n                  \n                </div>\n              </Card>\n            </Col>\n          ))}\n        </>\n        )}\n        else{\n          return <h1> No Dishes</h1>\n        }\n    }\n    export default Dishes"]},"metadata":{},"sourceType":"module"}